  哈希表，可能对于很多同行来说已经很熟悉．刚开始接触时有点陌生，后来用多了也就熟了．当然网上关于这一个知识点的介绍很多，不过这并不妨碍我个人对此作出自己的总结与理解． 

　　在.NET Framework中，Hashtable是System.Collections命名空间提供的一个容器，用于处理和表现类似key/value的键值对，其中key通常可用来快速查找，同时key是区分大小写；value用于存储对应于key的值。Hashtable中key/value键值对均为object类型，所以Hashtable可以支持任何类型的key/value键值对.
　　因此在用的过程中，需引用：using System.Collections;下面列一下常用的用法，右边给出相应的注释．
一．常用的方法：
　　Hashtable hshTable = new Hashtable(); //  创建哈希表
        hshTable .Add("Person1",  "zhanghf");  //  往哈希表里添加键值对
        hshTable .Clear();  //移除哈希表里所有的键值对
        hshTable .Contains("Person1");   //判断哈希表里是否包含该键
        string name = (string)hshTable["Person1"].ToString(); //取哈希表里指定键的值
        hshTable.Remove("Person1"); //  删除哈希表里指定键的键值对
        IDictionaryEnumerator en = hshTable.GetEnumerator();  //  遍历哈希表所有的键,读出相应的值
        while (en.MoveNext())
            {
               string str = en.Value.ToString(); 
            }
 二．遍历哈希表：
遍历哈希表需要用到DictionaryEntry Object，代码如下： 
　　for(DictionaryEntry de in ht) //ht为一个Hashtable实例 
　　{ 
　　　Console.WriteLine(de.Key);//de.Key对应于key/value键值对key 
　　　Console.WriteLine(de.Value);//de.Key对应于key/value键值对value 
　　} 
三．对哈希表进行排序 
对哈希表进行排序在这里的定义是对key/value键值对中的key按一定规则重新排列，但是实际上这个定义是不能实现的，因为我们无法直接在Hashtable进行对key进行重新排列，如果需要Hashtable提供某种规则的输出，可以采用一种变通的做法： 
　　　ArrayList akeys=new ArrayList(ht.Keys); //记得导入System.Collections 
　　　akeys.Sort(); //调用了akeys的按字母顺序进行排序Sort,这个很容易单独实现
　　　for(string skey in akeys) 
　　　{ 
　　　　Console.Write(skey + ":"); 
　　　　Console.WriteLine(ht[skey]);//排序后输出 
　　　} 
         哈希表在C#编程中用的比较多,功能强大,掌握并能熟悉运用是一件很好的事情!
一,哈希表(Hashtable)简述

  在.NET Framework中，Hashtable是System.Collections命名空间提供的一个容器，用于处理和表现类似keyvalue的键值对，其中key通常可用来快速查找，同时key是区分大小写；value用于存储对应于key的值。Hashtable中keyvalue键值对均为object类型，所以Hashtable可以支持任何类型的keyvalue键值对.

二,哈希表的简单操作

 在哈希表中添加一个keyvalue键值对：HashtableObject.Add(key,value);
 在哈希表中去除某个keyvalue键值对：HashtableObject.Remove(key);
 从哈希表中移除所有元素：           HashtableObject.Clear(); 
 判断哈希表是否包含特定键key：      HashtableObject.Contains(key);
 下面控制台程序将包含以上所有操作：
using System;
using System.Collections; file使用Hashtable时，必须引入这个命名空间
class hashtable
{
  public static void Main()
  {
  Hashtable ht=new Hashtable(); file创建一个Hashtable实例
  ht.Add(E,e);添加keyvalue键值对
  ht.Add(A,a);
  ht.Add(C,c);
  ht.Add(B,b);

  string s=(string)ht[A];
  if(ht.Contains(E)) file判断哈希表是否包含特定键,其返回值为true或false
    Console.WriteLine(the E keyexist);
  ht.Remove(C);移除一个keyvalue键值对
  Console.WriteLine(ht[A]);此处输出a
  ht.Clear();移除所有元素
  Console.WriteLine(ht[A]); file此处将不会有任何输出
  }
}

三,遍历哈希表

 遍历哈希表需要用到DictionaryEntry Object，代码如下：
 for(DictionaryEntry de in ht) fileht为一个Hashtable实例
 {
   Console.WriteLine(de.Key);de.Key对应于keyvalue键值对key
   Console.WriteLine(de.Value);de.Key对应于keyvalue键值对value
 }

四,对哈希表进行排序

  对哈希表进行排序在这里的定义是对keyvalue键值对中的key按一定规则重新排列，但是实际上这个定义是不能实现的，因为我们无法直接在Hashtable进行对key进行重新排列，如果需要Hashtable提供某种规则的输出，可以采用一种变通的做法：
 ArrayList akeys=new ArrayList(ht.Keys); file别忘了导入System.Collections
 akeys.Sort(); file按字母顺序进行排序
 for(string skey in akeys)
 {
   Console.Write(skey + );
   Console.WriteLine(ht[skey]);排序后输出
 }


